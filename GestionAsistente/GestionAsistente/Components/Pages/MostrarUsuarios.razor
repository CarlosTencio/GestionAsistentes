@page "/mostrar-usuarios"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@layout LayoutPrincipal
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation



<h2 class="mb-4">Mostrar Usuarios</h2>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Opciones</th>
                    <th>Usuario</th>
                    <th>Rol</th>
                    <th>Nombre</th>
                    <th>Unidad</th>
                </tr>
            </thead>
            <tbody>

                    @if (listaUsuarios == null || !listaUsuarios.Any())
                    {
                        <tr>
                            <td colspan="8">No se encontraron asistentes.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var usuario in listaUsuarios)
                        {
                            <tr>
                                <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ActualizarUsuario" @onclick="() => PrepararActualizacion(usuario.UsuarioID)">
                                        <!-- Icono SVG para editar -->
                                        <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                        </svg>
                                    </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => PrepararEliminarUsuario(usuario.UsuarioID)">
                                        <!-- Icono SVG para eliminar -->
                                        <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                            <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                        </svg>
                                    </button>
                                </td>
                                <td>@usuario.NombreUsuario</td>
                                <td>@usuario.Rol?.Nombre</td>
                                <td>@($"{usuario.Persona?.Nombre} {usuario.Persona?.PrimerApellido} {usuario.Persona?.SegundoApellido}")</td>
                                <td>@usuario.Unidad?.Nombre</td>
                            </tr>
                        }
                    }
            </tbody>
        </table>
    </div>
</div>

<div class="mt-3 text-center custom-margin" style="padding-bottom: 5em;">
    <button @onclick="() => CambiarPagina(currentPage - 1)"
            class="btn btn-secondary"
            disabled="@(totalItems == 0 || currentPage == 1)">
        <span aria-hidden="true">←</span> Anterior
    </button>
    <span class="mx-2">
        Página @((totalItems == 0) ? 0 : currentPage) de @((totalItems == 0) ? 0 : totalPages)
    </span>
    <button @onclick="() => CambiarPagina(currentPage + 1)"
            class="btn btn-secondary"
            disabled="@(totalItems == 0 || currentPage == totalPages)">
        Siguiente <span aria-hidden="true">→</span>
    </button>
</div>

<div class="modal fade" id="ConfirmarEliminar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title" id="ConfirmarEliminar">Eliminar usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5">Esta acción no se puede deshacer.</p>
                <p class="text-danger">¿Estás seguro de que deseas eliminar este usuario?</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => EliminarUsuario(eliminarUsuario.UsuarioID)">
                    Confirmar
                </button>
                <button class="btn btn-danger" data-bs-dismiss="modal">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ActualizarUsuario" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ActualizarUsuario">Actualizar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="usuario" OnValidSubmit="ActualizarUsuario" FormName="actualizarUsuarioForm">

                    <div class="row g-2">
                        <!-- Nombre -->
                        <div class="col-12 col-md-6">
                            <div class="form-floating mb-2">
                                <InputText id="nombre" class="form-control form-control-sm" @bind-Value="usuario.Persona.Nombre" placeholder="Nombre" />
                                <label for="nombre">Nombre</label>
                            </div>
                        </div>

                        <!-- Primer Apellido -->
                        <div class="col-12 col-md-6">
                            <div class="form-floating mb-2">
                                <InputText id="primerApellido" class="form-control form-control-sm" @bind-Value="usuario.Persona.PrimerApellido" placeholder="Primer Apellido" />
                                <label for="primerApellido">Primer Apellido</label>
                            </div>
                        </div>

                        <!-- Segundo Apellido -->
                        <div class="col-12 col-md-6">
                            <div class="form-floating mb-2">
                                <InputText id="segundoApellido" class="form-control form-control-sm" @bind-Value="usuario.Persona.SegundoApellido" placeholder="Segundo Apellido" />
                                <label for="segundoApellido">Segundo Apellido</label>
                            </div>
                        </div>

                        <!-- Unidad -->
                        <div class="col-12 col-md-6">
                            <label for="unidad">Unidad</label>
                            <InputSelect class="form-select form-select-sm" id="unidadID" @bind-Value="usuario.UnidadID">
                                <option value="">Sin unidad</option>

                                @foreach (var unidad in listaUnidades)
                                {
                                    <option value="@unidad.UnidadID">@unidad.Nombre</option>
                                }

                            </InputSelect>
                        </div>

                        <!-- Unidad -->
                        <div class="col-12 col-md-6">
                            <label for="unidad">Rol</label>
                            <InputSelect class="form-select form-select-sm" id="unidadID" @bind-Value="usuario.RolID">

                                <option value="">Sin rol</option>

                                @foreach (var rol in listaRoles)
                                {
                                    <option value="@rol.RolID">@rol.Nombre</option>
                                }

                            </InputSelect>
                        </div>

                        <!-- Nombre de Usuario -->
                        <div class="col-12 col-md-6">
                            <div class="form-floating mb-2">
                                <InputText id="nombreUsuario" class="form-control form-control-sm" @bind-Value="usuario.NombreUsuario" placeholder="Nombre de usuario" />
                                <label for="nombreUsuario">Nombre de usuario</label>
                            </div>
                        </div>

                        <!-- Contraseña -->
                        <div class="col-12 col-md-6">
                            <div class="form-floating mb-2">
                                <InputText id="contrasenia" class="form-control form-control-sm" style="height: 80%;" @bind-Value="usuario.Contrasenia" placeholder="Contraseña" />
                                <label for="contrasenia">Contraseña</label>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Actualizar usuario</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (notificarUsuario != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                    <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@notificarUsuario</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private string? userName;
    private string notificarUsuario;

    private string mensaje;
    private bool exito;

    private string adminRol = "Administrador";

    private UnidadControlador unidadControlador = new UnidadControlador();

    private UsuarioControlador usuarioControlador = new UsuarioControlador();

    private RolControlador rolControlador = new RolControlador();

    private List<Usuario> listaUsuarios = new List<Usuario>();

    private List<Unidad> listaUnidades = new List<Unidad>();

    private List<Rol> listaRoles = new List<Rol>();

    private HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    private HistorialAcciones historialAcciones = new HistorialAcciones();

    private Horario horario = new Horario()
        {
            Asistente = new Asistente()
            {
                Persona = new Persona()
            }
        };

    private Usuario usuario = new Usuario()
    {
        Persona = new Persona(),
        Rol = new Rol()
    };
    private Usuario eliminarUsuario = new Usuario()
        {
            Persona = new Persona(),
            Rol = new Rol()
        };
    private Usuario actualizarUsuario = new Usuario()
        {
            Persona = new Persona(),
            Rol = new Rol()
        };

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    private ClaimsPrincipal user;
    private string nombreUsuario;
    private string rol;
    private int? unidadId;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            nombreUsuario = user.Identity.Name;
            rol = user.FindFirst(ClaimTypes.Role)?.Value;
            unidadId = int.TryParse(user.FindFirst("UnidadId")?.Value, out int result)
     ? result
     : (int?)null;


        }
        else
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }

        historialAcciones.NombrePersona = nombreUsuario;


        listaUnidades = await unidadControlador.ListarUnidades();

        listaRoles = await rolControlador.ListarRoles();

        //si es usuario regular se filtra solo para mostrar el rol de usuario
        if(unidadId != null)
        {
            listaRoles = listaRoles.Where(r => r.Nombre == rol).ToList();
            listaUnidades = listaUnidades.Where(u => u.UnidadID == unidadId).ToList();
        }

        await CargarPagina();
    }

    private void LimpiarFormularioActualizar()
    {

        StateHasChanged();
    }

    private async Task PrepararActualizacion(int usuarioID)
    {

        actualizarUsuario = listaUsuarios.Find(u => u.UsuarioID == usuarioID);

        usuario.UsuarioID = actualizarUsuario.UsuarioID;
        usuario.NombreUsuario = actualizarUsuario.NombreUsuario;
        usuario.Persona = actualizarUsuario.Persona;
        usuario.Rol = actualizarUsuario.Rol;
        usuario.PersonaID = actualizarUsuario.PersonaID;
        usuario.RolID = actualizarUsuario.RolID;
        usuario.UnidadID = actualizarUsuario.UnidadID;
        usuario.Unidad = actualizarUsuario.Unidad;
        usuario.Contrasenia = actualizarUsuario.Contrasenia;

        //si el rolName es admin se debe de quitar las unidades
        if (usuario.Rol != null && usuario.Rol.Nombre == adminRol)
        {
            listaUnidades.Clear();
        }
        //si es usuario regular se aplica todas las unidades del usuario
        else if (usuario.Rol != null && usuario.Rol.Nombre != adminRol && unidadId != null)
        {
            listaUnidades = await unidadControlador.ListarUnidades();
            //poner la lista unidades que le corresponde al usuario
            listaUnidades = listaUnidades.Where(u => u.UnidadID == actualizarUsuario.UnidadID).ToList();
        }
        //rol de admin usuario seleccionado y usuario autenticado admin
        else if (usuario.Rol != null && usuario.Rol.Nombre != adminRol && unidadId == null)
        {
            listaUnidades = await unidadControlador.ListarUnidades();
        }

    }

    private async Task PrepararEliminarUsuario(int usuarioID)
    {
        eliminarUsuario = listaUsuarios.Find(u => u.UsuarioID == usuarioID);
    }
    
    private async Task EliminarUsuario(int usuarioID)
    {

        (string mensaje, bool eliminado) = await usuarioControlador.EliminarUsuario(usuarioID);

        if (eliminado)
        {

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Eliminar usuario: ";
            historialAcciones.Fecha = DateTime.Now;
            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            //cargar de nuevo la lista de usuarios para paginar
            await CargarPagina();
            
            notificarUsuario = mensaje;

            StateHasChanged();
        }
        else
        {
            notificarUsuario = mensaje;
        }
    }

    private async Task ActualizarUsuario()
    {
        (mensaje, exito) = await usuarioControlador.ActualizarUsuario(usuario);

        if (exito)
        {

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = $"Actualizar usuario: {actualizarUsuario.NombreUsuario} a {usuario.NombreUsuario}";

            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            await CargarPagina();

            notificarUsuario = mensaje;

            StateHasChanged();
        }
        else
        {
            notificarUsuario = mensaje;
        }
            
    }
    
    
    private async Task CargarPagina()
    {
        var allAsistentes = await usuarioControlador.ListarUsuarios();
        
        if (unidadId != null)
        {
            allAsistentes = allAsistentes.Where(a => a.UnidadID == unidadId).ToList();
        }

        totalItems = allAsistentes.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        listaUsuarios = allAsistentes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

    private void CerrarModal()
    {
        notificarUsuario = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {

        notificarUsuario = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }
}
