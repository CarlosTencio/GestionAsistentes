@page "/crear-usuarios"
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h3 style="text-align: center;">Crear Usuario</h3>

<div class="row justify-content-center">
    <div class="col-md-4">
        <EditForm Model="usuario" OnValidSubmit="RegistrarUsuario" FormName="crearUsuarioForm">
        
            <div class="row g-2">
                <!-- Nombre -->
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="nombre" class="form-control form-control-sm" @bind-Value="usuario.Persona.Nombre" placeholder="Nombre" />
                        <label for="nombre">Nombre</label>
                    </div>
                </div>

                <!-- Primer Apellido -->
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="primerApellido" class="form-control form-control-sm" @bind-Value="usuario.Persona.PrimerApellido" placeholder="Primer Apellido" />
                        <label for="primerApellido">Primer Apellido</label>
                    </div>
                </div>

                <!-- Segundo Apellido -->
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="segundoApellido" class="form-control form-control-sm" @bind-Value="usuario.Persona.SegundoApellido" placeholder="Segundo Apellido" />
                        <label for="segundoApellido">Segundo Apellido</label>
                    </div>
                </div>

                <!-- Unidad -->
                <div class="col-12 col-md-6">
                    <label for="unidad">Unidad</label>
                    <InputSelect class="form-select form-select-sm" id="unidadID" @bind-Value="usuario.UnidadID">
                        <option value="0">-- Seleccione una unidad --</option>
                        
                        @foreach (var unidad in listaUnidades)
                        {
                        <option value="@unidad.UnidadID">@unidad.Nombre</option>
                        }
                       
                    </InputSelect>
                </div>

                <!-- Nombre de Usuario -->
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="nombreUsuario" class="form-control form-control-sm" @bind-Value="usuario.NombreUsuario" placeholder="Nombre de usuario" />
                        <label for="nombreUsuario">Nombre de usuario</label>
                    </div>
                </div>

                <!-- Contraseña -->
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="contrasenia" class="form-control form-control-sm" style="height: 80%;" @bind-Value="usuario.Contrasenia" placeholder="Contraseña" />
                        <label for="contrasenia">Contraseña</label>
                    </div>
                </div>
            </div>

            <!-- Botón de envío centrado -->
            <div style="text-align:center; margin: 0.7em;">
                <button type="submit" class="btn btn-primary btn-sm">Registrar Usuario</button>
            </div>
        </EditForm>


    </div>

    @if (mensajeExito != null)
    {
        <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content custom-modal">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmación</h5>
                        <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@mensajeExito</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (mensajeError != null)
    {
        <div id="ModalError" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content custom-modal">
                    <div class="modal-header">
                        <h5 class="modal-title">Error</h5>
                        <button type="button" class="close" @onclick="CerrarModalError" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@mensajeError</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModalError">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    public UsuarioControlador usuarioControlador = new UsuarioControlador();
    private UnidadControlador unidadControlador = new UnidadControlador();
    private Usuario usuario = new Usuario
    {
       Persona = new Persona()
    };
    private string mensajeExito, mensajeError;

    private ClaimsPrincipal user;
    private string nombreUsuario;
    private string rol;
    private int? unidadId;
    

    private List<Unidad> listaUnidades = new List<Unidad>();

    public HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    public HistorialAcciones historialAcciones = new HistorialAcciones();

    protected override async Task OnInitializedAsync()
    {
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            nombreUsuario = user.Identity.Name;
            rol = user.FindFirst(ClaimTypes.Role)?.Value;
            unidadId = int.TryParse(user.FindFirst("UnidadId")?.Value, out int result)
     ? result
     : (int?)null;


        }
        else
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }

        historialAcciones.NombrePersona = nombreUsuario;

        listaUnidades = await unidadControlador.ListarUnidades();
        
        if (unidadId != null)
        {
            listaUnidades = listaUnidades.Where(u => u.UnidadID == unidadId).ToList();
        }
    }

    private async Task RegistrarUsuario()
    {

        (string mensaje, bool esExitoso) = await usuarioControlador.RegistrarUsuario(usuario);
        if (esExitoso)
        {
            mensajeExito = mensaje;
            mensajeError = null;

            StateHasChanged();

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Registrar usuario: "+usuario.NombreUsuario;
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);
            LimpiarFormulario();
        }
        else
        {

            mensajeExito = null;
            mensajeError = mensaje;

        }

    }

    private void LimpiarFormulario()
    {
        usuario.Persona.Nombre = "";
        usuario.Persona.PrimerApellido = "";
        usuario.Persona.SegundoApellido = "";
        usuario.NombreUsuario = "";
        usuario.Contrasenia = "";
        usuario.UnidadID = 0;
    }

    private void CerrarModal()
    {
        mensajeExito = null;
        mensajeError = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {
        mensajeError = null;
        mensajeExito = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }


}
